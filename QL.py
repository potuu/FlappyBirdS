import numpyimport jsonclass ql:    def __init__(self,StateN,ActionN,LearnRate,Discount):        self.LearnRate = LearnRate        self.Discount = Discount        self.Qtable = []        self.StateN = StateN        self.generation = 0        for i in range(StateN):            self.Qtable.append([])            for j in range(ActionN):                self.Qtable[i].append(numpy.random.uniform(-1,1))    def Reward(self,state,newstate,reward):        print(reward)        self.generation += 1        if self.generation%2000 == 0:            s = 'data/Gen'+str(self.generation)+'.json'            f = open(s,'w')            f.write(json.dumps(self.Qtable))            f.close()        max_q = max(self.Qtable[newstate])        action = numpy.argmax(self.Qtable[state])        LearnRate = numpy.exp(-self.generation/1000)*0.85 + 0.15        self.Qtable[state][action] = (1 - LearnRate)*self.Qtable[state][action] + LearnRate*(reward+self.Discount*max_q)    def Action(self,state):        action = numpy.argmax(self.Qtable[state])        return action    def Load(self,s):        f = open(s,'r')        self.Qtable = json.loads(f.readline())        f.close()